/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/health": {
    get: operations["HealthController_checkHealth"];
  };
  "/api/cta/submit": {
    post: operations["CtaController_submitEmail"];
  };
  "/users/register": {
    post: operations["UserController_register"];
  };
  "/users/login": {
    post: operations["UserController_login"];
  };
  "/users/me": {
    get: operations["UserController_getProfile"];
  };
  "/lobbies": {
    /** Get all lobbies */
    get: operations["LobbyController_findAll"];
    /** Create a new lobby */
    post: operations["LobbyController_create"];
  };
  "/lobbies/{id}": {
    /** Get a specific lobby */
    get: operations["LobbyController_findOne"];
  };
  "/lobbies/{id}/join": {
    /** Join a lobby */
    post: operations["LobbyController_join"];
  };
  "/lobbies/{id}/leave": {
    /** Leave a lobby */
    post: operations["LobbyController_leave"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    CtaSubmissionDto: Record<string, never>;
    CreateUserDto: {
      /**
       * @description The username of the user
       * @example JohnDoe
       */
      username: string;
      /**
       * @description The password of the user
       * @example password123
       */
      password: string;
    };
    LoginUserDto: {
      /**
       * @description The username of the user
       * @example JohnDoe
       */
      username: string;
      /**
       * @description The password of the user
       * @example password123
       */
      password: string;
    };
    CreateLobbyDto: {
      /**
       * @description The name of the lobby
       * @example Cyber Detective Room
       */
      name: string;
      /**
       * @description Maximum number of players allowed in the lobby
       * @default 8
       * @example 8
       */
      maxPlayers: number;
    };
    LobbyResponseDto: {
      id: string;
      name: string;
      maxPlayers: number;
      players: string[];
      gameStarted: boolean;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      lastEmptyAt?: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  HealthController_checkHealth: {
    responses: {
      200: {
        content: never;
      };
    };
  };
  CtaController_submitEmail: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CtaSubmissionDto"];
      };
    };
    responses: {
      201: {
        content: never;
      };
    };
  };
  UserController_register: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateUserDto"];
      };
    };
    responses: {
      201: {
        content: never;
      };
    };
  };
  UserController_login: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["LoginUserDto"];
      };
    };
    responses: {
      201: {
        content: never;
      };
    };
  };
  UserController_getProfile: {
    responses: {
      200: {
        content: never;
      };
    };
  };
  /** Get all lobbies */
  LobbyController_findAll: {
    responses: {
      /** @description Return all available lobbies */
      200: {
        content: {
          "application/json": components["schemas"]["LobbyResponseDto"][];
        };
      };
    };
  };
  /** Create a new lobby */
  LobbyController_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateLobbyDto"];
      };
    };
    responses: {
      /** @description The lobby has been successfully created. */
      201: {
        content: {
          "application/json": components["schemas"]["LobbyResponseDto"];
        };
      };
      /** @description Invalid input data. */
      400: {
        content: never;
      };
      /** @description User is not authorized. */
      401: {
        content: never;
      };
    };
  };
  /** Get a specific lobby */
  LobbyController_findOne: {
    parameters: {
      path: {
        /** @description Lobby identifier */
        id: string;
      };
    };
    responses: {
      /** @description Return the lobby */
      200: {
        content: {
          "application/json": components["schemas"]["LobbyResponseDto"];
        };
      };
      /** @description Lobby not found */
      404: {
        content: never;
      };
    };
  };
  /** Join a lobby */
  LobbyController_join: {
    parameters: {
      path: {
        /** @description Lobby identifier */
        id: string;
      };
    };
    responses: {
      /** @description Successfully joined the lobby */
      200: {
        content: {
          "application/json": components["schemas"]["LobbyResponseDto"];
        };
      };
      /** @description Lobby is full or game has already started */
      400: {
        content: never;
      };
      /** @description Lobby not found */
      404: {
        content: never;
      };
    };
  };
  /** Leave a lobby */
  LobbyController_leave: {
    parameters: {
      path: {
        /** @description Lobby identifier */
        id: string;
      };
    };
    responses: {
      /** @description Successfully left the lobby */
      200: {
        content: {
          "application/json": components["schemas"]["LobbyResponseDto"];
        };
      };
      /** @description Lobby not found */
      404: {
        content: never;
      };
    };
  };
}
